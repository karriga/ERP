package com.jukusoft.erp.lib.message.request;

import com.jukusoft.erp.lib.exception.HandlerException;
import io.vertx.core.json.JsonObject;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.List;

public class ApiRequest {

    //name of event
    protected String eventName = "";

    //json data
    protected JSONObject data = null;

    protected String ackID = "";

    //cluster wide unique message id for logging
    protected long messageID = 0;

    //external ID (for ack requests, generated by client), UUID as string
    protected String externalID = "";

    //meta information
    protected JSONObject meta = new JSONObject();
    protected String sessionID = "";
    protected boolean isLoggedIn = false;
    protected long userID = -1;

    //user permissions
    protected List<String> permissions = new ArrayList<>();

    /**
    * default constructor
     *
     * @param event event name
     * @param data json data
    */
    public ApiRequest (String event, JSONObject data, long messageID, String externalID, String sessionID, boolean isLoggedIn, long userID) {
        this.eventName = event;
        this.data = data;
        this.messageID = messageID;
        this.externalID = externalID;
        this.sessionID = sessionID;
        this.isLoggedIn = isLoggedIn;
        this.userID = userID;
    }

    protected ApiRequest () {
        //
    }

    public String getEvent () {
        return this.eventName;
    }

    public JSONObject getData () {
        return this.data;
    }

    /**
    * check, if param exists, else throw an exception
     *
     * @param key key of param
    */
    public void checkParam (String key) throws HandlerException {
        if (!getData().has(key)) {
            throw new HandlerException("key doesnt exists: " + key);
        }
    }

    public int getInt (String key) {
        checkParam(key);

        try {
            return getData().getInt(key);
        } catch (JSONException e) {
            throw new HandlerException("key '" + key + "' is not an integer.");
        }
    }

    public double getDouble (String key) {
        checkParam(key);

        try {
            return getData().getDouble(key);
        } catch (JSONException e) {
            throw new HandlerException("key '" + key + "' is not an double.");
        }
    }

    public float getFloat (String key) {
        checkParam(key);

        try {
            return (float) getData().getDouble(key);
        } catch (JSONException e) {
            throw new HandlerException("key '" + key + "' is not an float.");
        }
    }

    public String getString (String key) {
        checkParam(key);

        try {
            return getData().getString(key);
        } catch (JSONException e) {
            throw new HandlerException("key '" + key + "' is not an string.");
        }
    }

    public JSONObject getJsonObject (String key) {
        checkParam(key);

        try {
            return getData().getJSONObject(key);
        } catch (JSONException e) {
            throw new HandlerException("key '" + key + "' is not an json object.");
        }
    }

    public JSONArray getJsonArray (String key) {
        checkParam(key);

        try {
            return getData().getJSONArray(key);
        } catch (JSONException e) {
            throw new HandlerException("key '" + key + "' is not an json array.");
        }
    }

    public long getMessageID () {
        return this.messageID;
    }

    public String getExternalID () {
        return this.externalID;
    }

    public JSONObject getMeta () {
        return this.meta;
    }

    public String getSessionID () {
        return this.sessionID;
    }

    public boolean isLoggedIn () {
        return this.isLoggedIn;
    }

    public long getUserID () {
        return this.userID;
    }

    public String getIP () {
        return getMeta().getString("host");
    }

    public int getPort () {
        return getMeta().getInt("port");
    }

    @Override
    public String toString () {
        if (data.has("password")) {
            //dont log data to hide password
            return "api request (event: " + eventName + ", messageID: " + messageID + ", data: *********)";
        } else {
            return "api request (event: " + eventName + ", messageID: " + messageID + ", data: " + this.data.toString() + ")";
        }
    }

}
